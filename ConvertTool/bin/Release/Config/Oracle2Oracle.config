<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <add key="View_Source" value="
SELECT
	a.TABLE_NAME AS TableName,
	a.COLUMN_NAME AS ColumnName,
	a.DATA_TYPE AS DataType
FROM
	all_tab_columns a 
WHERE
	a.OWNER = 'SA'  
	AND ( SELECT count( * ) FROM all_views v WHERE v.OWNER = 'SA' AND v.VIEW_NAME = a.TABLE_NAME ) = 0 
ORDER BY
	a.TABLE_NAME,
a.COLUMN_ID" />
    <add key="View_Template" value="
create or replace view {0}
as
 select 
{1}
 from {2} a
         "/>

    <add key="MaterializedViewLog_Source" value="
SELECT
	a.TABLE_NAME AS TableName,
	a.COLUMN_NAME AS ColumnName,
	a.DATA_TYPE AS DataType,
CASE
	
	WHEN a.DATA_TYPE = 'NUMBER' THEN
CASE
	
	WHEN a.Data_Precision IS NULL THEN
	a.Data_Length ELSE a.Data_Precision 
	END ELSE a.Data_Length 
	END AS Length,
CASE
		
		WHEN (
		SELECT
			count( * ) 
		FROM
			all_cons_columns c 
		WHERE
			c.OWNER = 'SA' 
			AND c.table_name = a.TABLE_NAME 
			AND c.column_name = a.COLUMN_NAME 
			AND c.constraint_name = (
			SELECT
				d.constraint_name 
			FROM
				all_constraints d 
			WHERE
				d.OWNER = 'SA' 
				AND d.table_name = c.table_name 
				AND d.constraint_type = 'P' 
			) 
			) > 0 THEN
			'1' ELSE '0' 
		END AS IsPK,
		a.data_scale AS data_scale 
	FROM
		all_tab_columns a 
	WHERE
		a.OWNER = 'SA' 
		AND ( SELECT count( * ) FROM all_views v WHERE v.OWNER = 'SA' AND v.VIEW_NAME = a.TABLE_NAME ) = 0 
	ORDER BY
	a.TABLE_NAME,
a.COLUMN_ID"/>
    <!--物化视图日志语句,谨慎修改
     {0}=表名
     {1}=是否有 "primary key,"  语句
     {2}=主键外所有列名,用","隔开
    -->
    <add key="MaterializedViewLog_Template" value="
create materialized view log on FEHIS1211.{0} tablespace users with {1} rowid,sequence( 
{2}
) including new values;" />

    <add key="MaterializedView_Source" value="
SELECT
	a.TABLE_NAME AS TableName,
	a.COLUMN_NAME AS ColumnName,
	a.DATA_TYPE AS DataType,
CASE
	
	WHEN a.DATA_TYPE = 'NUMBER' THEN
CASE
	
	WHEN a.Data_Precision IS NULL THEN
	a.Data_Length ELSE a.Data_Precision 
	END ELSE a.Data_Length 
	END AS Length,
CASE
		
		WHEN (
		SELECT
			count( * ) 
		FROM
			all_cons_columns c 
		WHERE
			c.OWNER = 'SA' 
			AND c.table_name = a.TABLE_NAME 
			AND c.column_name = a.COLUMN_NAME 
			AND c.constraint_name = (
			SELECT
				d.constraint_name 
			FROM
				all_constraints d 
			WHERE
				d.OWNER = 'SA' 
				AND d.table_name = c.table_name 
				AND d.constraint_type = 'P' 
			) 
			) > 0 THEN
			'1' ELSE '0' 
		END AS IsPK,
		a.data_scale AS data_scale 
	FROM
		all_tab_columns a 
	WHERE
		a.OWNER = 'SA' 
		AND ( SELECT count( * ) FROM all_views v WHERE v.OWNER = 'SA' AND v.VIEW_NAME = a.TABLE_NAME ) = 0 
	ORDER BY
	a.TABLE_NAME,
a.COLUMN_ID"/>
    <!--其他要生成的语句
     {0}=表名
     {1}=表所有列名及类型
     {2}=所有主键列
     {3}=带src.的所有主键列
     {4}=带src.的非主键列
     {5}=索引列(有主键时为主键列,无主键时为所有列)
     {6}=fast or complete
     {7}=主键外所有列名,用","隔开
    -->
    <add key="MaterializedView_Template" value="
create materialized view {0}_1 
tablespace users 
build immediate 
refresh {6} on demand 
as 
select * from 
FEHIS1211.{0}@ where 1=2;

create materialized view {0}_2 
tablespace users 
build immediate 
refresh {6} on demand 
as 
select * from 
FEHIS1211.{0}@ where 1=2;

create table {0} 
(
  {1}
  m_row$$         VARCHAR2(255),
  sequence$$      NUMBER,
  snaptime$$      DATE,
  dmltype$$       VARCHAR2(1),
  old_new$$       VARCHAR2(1),
  change_vector$$ RAW(255),
  CIPINSERTTIME TIMESTAMP
);

create index IDX_{0}_SEQ on {0}(SEQUENCE$$ desc);

create index IDX_{0}_INS on {0}(CIPINSERTTIME desc);

create index IDX_{0}_PK  on {0}({5}SEQUENCE$$ desc);

create or replace procedure L_{0}_OM as 
OldRefreshTime Date;
OldMViewName VARCHAR(100);
begin
   select last_refresh_date,mview_name into OldRefreshTIme,OldMViewName 
   from (
     select last_refresh_date,mview_name from USER_MVIEWS where mview_name in ('{0}_1','{0}_2') order by last_refresh_date
   ) TMP where ROWNUM=1;
   
   if OldRefreshTime is null then 
     return;
     End if;
     
   insert into {0} (
  {2} 
  {7},
  m_row$$, 
  sequence$$, 
  snaptime$$, 
  dmltype$$, 
  old_new$$, 
  change_vector$$, 
  CIPINSERTTIME
   ) select 
  {3}
  {4}
  src.m_row$$, 
  src.sequence$$, 
  src.snaptime$$, 
  src.dmltype$$, 
  src.old_new$$, 
  src.change_vector$$, 
  SYSTIMESTAMP as CIPINSERTTIME 
     from FEHIS1211.MLOG$_{0}@{3} src 
     left join {0} target on src.SEQUENCE$$=target.SEQUENCE$$ 
     where src.SNAPTIME$$>OldRefreshTime and target.SEQUENCE$$ is null;
     
     DBMS_MVIEW.REFRESH(OldMViewName);
   
end L_{0}_OM;


begin
dbms_scheduler.create_job ( 
job_name => 'JOB_{0}', 
job_type => 'STORED_PROCEDURE', 
job_action => 'L_{0}_OM',
start_date => sysdate,
repeat_interval => 'FREQ=secondly;interval=5',
comments => '{0} table sync', 
auto_drop=>false 
); 
end;  

begin
dbms_scheduler.enable('JOB_{0}');
end;"/>
  </appSettings>
</configuration>